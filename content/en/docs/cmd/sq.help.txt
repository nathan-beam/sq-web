sq is a swiss-army knife for wrangling data.

Use sq to query Postgres, SQLite, SQLServer, MySQL, CSV, Excel, etc,
and output in text, JSON, CSV, Excel and so on, or
write output to a database table.

You can query using sq's own jq-like syntax, or in native SQL.

Use "sq inspect" to view schema metadata. Use the "sq tbl" commands
to copy, truncate and drop tables.

See docs and more: https://sq.io

Usage:
  sq [command]

Examples:
  # pipe an Excel file and output the first 10 rows from sheet1
  $ cat data.xlsx | sq '.sheet1 | .[0:10]'

  # add Postgres source identified by handle @sakila_pg
  $ sq add --handle=@sakila_pg 'postgres://user:pass@localhost:5432/sakila'

  # add SQL Server source; will have generated handle @sakila_mssql
  $ sq add 'sqlserver://user:pass@localhost?database=sakila'

  # list available data sources
  $ sq ls

  # ping all data sources
  $ sq ping all

  # set active data source
  $ sq src @sakila_pg

  # get specified cols from table address in active data source
  $ sq '.address |  .address_id, .city, .country'

  # get metadata (schema, stats etc) for data source
  $ sq inspect @sakila_pg

  # get metadata for a table
  $ sq inspect @pg1.person

  # output in JSON
  $ sq -j '.person | .uid, .username, .email'

  # output in text format (with header)
  $ sq -th '.person | .uid, .username, .email'

  # output in text format (no header)
  $ sq -t '.person | .uid, .username, .email'

  # output to a HTML file
  $ sq --html '@sakila_sl3.actor' -o actor.html

  # join across data sources
  $ sq '@my1.person, @pg1.address | join(.uid) | .username, .email, .city'

  # insert query results into a table in another data source
  $ sq --insert=@pg1.person '@my1.person | .username, .email'

  # execute a database-native SQL query, specifying the source
  $ sq sql --src=@pg1 'SELECT uid, username, email FROM person LIMIT 2'

  # copy a table (in the same source)
  $ sq tbl copy @sakila_sl3.actor .actor2

  # truncate tables
  $ sq tbl truncate @sakila_sl3.actor2

  # drop table
  $ sq tbl drop @sakila_sl3.actor2

Available Commands:
  add         Add data source
  src         Get or set active data source
  group       Get or set active group
  ls          List sources and groups
  mv          Move/rename sources and groups
  rm          Remove data source or group
  inspect     Inspect data source schema and stats
  ping        Ping data sources
  sql         Execute DB-native SQL query or statement
  tbl         Useful table actions (copy, truncate, drop)
  driver      Manage drivers
  config      Manage config
  completion  Generate shell completion script
  version     Show version info
  help        Show help

Flags:
  -j, --json                       Output JSON
  -A, --jsona                      Output LF-delimited JSON arrays
  -l, --jsonl                      Output LF-delimited JSON objects
  -C, --csv                        Output CSV
  -T, --tsv                        Output TSV
      --html                       Output HTML table
      --md                         Output Markdown
  -r, --raw                        Output each record field in raw format without any encoding or delimiter
  -x, --xlsx                       Output Excel XLSX
  -X, --xml                        Output XML
  -c, --compact                    Compact instead of pretty-printed output
      --format.datetime string     Timestamp format: constant such as RFC3339 or a strftime format (default "RFC3339")
      --format.datetime.number     Render numeric datetime value as number instead of string (default true)
      --format.date string         Date format: constant such as DateOnly or a strftime format (default "DateOnly")
      --format.date.number         Render numeric date value as number instead of string (default true)
      --format.time string         Time format: constant such as TimeOnly or a strftime format (default "TimeOnly")
      --format.time.number         Render numeric time value as number instead of string (default true)
  -o, --output string              Write output to <file> instead of stdout
      --insert string              Insert query results into @HANDLE.TABLE. If not existing, TABLE will be created.
      --src string                 Override the active source for this query
      --ingest.driver string       Explicitly specify the driver to use for ingesting data
      --ingest.header              Treat first row of ingest data as header
      --driver.csv.empty-as-null   Treat empty CSV fields as null (default true)
      --driver.csv.delim string    CSV delimiter: one of comma, space, pipe, tab, colon, semi, period (default "comma")
      --version                    Print version info
  -h, --header                     Print header row (default true)
      --help                       Show help
  -H, --no-header                  Don't print header row
  -t, --text                       Output text
      --config string              Load config from here
      --log                        Enable logging
      --log.file string            Path to log file; empty disables logging
      --log.level string           Log level: one of DEBUG, INFO, WARN, ERROR
  -M, --monochrome                 Don't colorize output
  -v, --verbose                    Verbose output

Use "sq [command] --help" for more information about a command.
